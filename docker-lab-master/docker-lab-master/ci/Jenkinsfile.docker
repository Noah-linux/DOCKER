pipeline {
    agent any

    tools {
        maven 'maven3.9.9' // Use Maven version 3.9.9
        jdk 'java' // Use JDK 8
    }

    environment {
        registry = "shegerbootcamp/petclinic-java" // Docker image name to be used
        registryCredential = 'DOCKERHUB-ACCESS-TOKEN' // Jenkins credential ID for DockerHub
        dockerImage = '' // Placeholder for Docker image object
    }

    stages {
        stage('Cloning Git') {
            steps {
                git 'https://github.com/noaalinux/docker-lab.git' // Clone the Git repository
            }
        }
        
        stage('Compile Code') {
            steps {
                dir('petclinic-app') { // Change directory to 'petclinic-app'
                    sh 'mvn compile' // Compile the code without running tests
                }
            }
        }
        
        stage('Build Package') {
            steps {
                dir('petclinic-app') { // Change directory to 'petclinic-app'
                    sh 'mvn clean install -DskipTests=true' // Build the package without running tests
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
               dir('petclinic-app') { 
                 script {
                     dockerImage = docker.build("${registry}:latest") // Build the Docker image with the tag 'latest'
                 }
               }
            }
        }
        
        stage('Publish Docker Image to DockerHub') {
            steps {
                script {
                    docker.withRegistry('', registryCredential) {
                        dockerImage.push() // Push the Docker image to DockerHub
                    }
                }
            }
        }
        
        stage('Remove Unused Docker Image') {
            steps {
                sh "docker rmi ${registry}:latest" // Remove the local Docker image to free up space
            }
        }
        
        stage('Deploy Docker Image') {
            steps {
                script {
                    sh "docker run -d -p 8081:8081 ${registry}:latest" // Deploy the Docker image and map port 8081
                }
            }
        }
    }


    options {
        buildDiscarder(logRotator(daysToKeepStr: '3')) // Rotate logs, keep builds for 3 days
    }
}